import{aq as D,S as y,t as b,s as I,m as o,I as k,ar as M,d,j as C,k as g,a_ as B,a$ as N,b0 as V,q as E,g as A}from"./DR9_mXdV.js";import{s as L}from"./CWXAkm_V.js";const P="Indicator",S=A(P,"indicator-g"),v=A(P,"triangle-g"),_={name:P,defaultParams:k,layerIndex:M,validator:(m,{validateColumns:a})=>a(m,{startAngle:{toBeTypes:["number"]},endAngle:{toBeTypes:["number"]},radius:{toBeTypes:["number"]},size:{toBeTypes:["number"]},colorType:{toBeOption:"ColorType"},value:{toBeTypes:["number"]}})};function j({containerSelection:m,angle:a,pointerDistance:u,fullParams:s,fullChartParams:f,graphicColor:i}){const p=m.selectAll(`g.${S}`).data([a]).join(r=>r.append("g").attr("class",S).attr("transform",`rotate(${s.startAngle/Math.PI*180})`),r=>r,r=>r.remove());p.transition().duration(f.transitionDuration).attr("transform",`rotate(${a})`),p.selectAll(`g.${v}`).data([u]).join("g").attr("class",v).attr("transform",`translate(0, -${u})`).selectAll("path").data([s.size]).join("path").attr("d",B().type(N).size(r=>Math.sqrt(3)/4*Math.pow(s.size,2))).attr("fill",i)}function w(m,a){const u=new y;a.containerSelection.selectAll("g").remove();const s=a.containerVisibleComputedSortedData$.pipe(o(e=>e.reduce((t,l)=>t+(l.value??0),0)),d()),f=C({fullParams:a.fullParams$,containerValueSum:s}).pipe(g(async e=>e),o(({fullParams:e,containerValueSum:t})=>V().domain([0,t]).range([e.startAngle/Math.PI*180,e.endAngle/Math.PI*180]))),i=a.fullParams$.pipe(o(e=>e.value),d()),p=C({value:i,valueToAngle:f}).pipe(g(async e=>e),o(({value:e,valueToAngle:t})=>t(e)),d()),r=C({fullParams:a.fullParams$,seriesContainerPosition:a.seriesContainerPosition$}).pipe(g(async e=>e),o(({fullParams:e,seriesContainerPosition:t})=>{const{radius:l}=e,{width:n,height:$}=t;return Math.min(n,$)*l/2}),d()),c=C({value:i,containerVisibleComputedSortedData:a.containerVisibleComputedSortedData$}).pipe(g(async e=>e),o(({value:e,containerVisibleComputedSortedData:t})=>{let l=0,n=0;for(let $=0;$<t.length;$++){const T=t[$].value??0;if(n+=T,n>=e){l=$;break}}return l}),d()),h=C({value:i,valueStackedIndex:c,fullParams:a.fullParams$,fullChartParams:a.fullChartParams$}).pipe(g(async e=>e),o(e=>{const l={color:e.fullParams.colorType==="label"?e.fullChartParams.colors[e.fullChartParams.colorScheme].label[e.valueStackedIndex]:"",seriesIndex:0,seriesLabel:"",seq:0};return E({datum:l,colorType:e.fullParams.colorType,fullChartParams:e.fullChartParams})}),d());return C({fullParams:a.fullParams$,fullChartParams:a.fullChartParams$,angle:p,pointerDistance:r,graphicColor:h}).subscribe(e=>{j({containerSelection:a.containerSelection,angle:e.angle,pointerDistance:e.pointerDistance,fullParams:e.fullParams,fullChartParams:e.fullChartParams,graphicColor:e.graphicColor})}),()=>{u.next(void 0)}}const G=D(_)(({selection:m,observer:a,subject:u})=>{const s=new y,{seriesCenterSelection$:f}=L({selection:m,pluginName:P,visibleComputedSortedData$:a.visibleComputedSortedData$,seriesContainerPosition$:a.seriesContainerPosition$}),i=[];return f.pipe(b(s)).subscribe(p=>{i.forEach(r=>r()),p.each((r,c,h)=>{const e=I(h[c]),t=a.visibleComputedSortedData$.pipe(b(s),o(n=>n[c]??n[0])),l=a.seriesContainerPosition$.pipe(b(s),o(n=>n[c]??n[0]));i[c]=w(P,{containerSelection:e,containerVisibleComputedSortedData$:t,fullParams$:a.fullParams$,fullChartParams$:a.fullChartParams$,seriesContainerPosition$:l,event$:u.event$})})}),()=>{s.next(void 0)}});export{G as I};
